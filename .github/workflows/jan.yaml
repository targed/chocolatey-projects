name: Jan Package Update

on:
  workflow_dispatch:
  schedule:
    - cron: "0 1 * * *" # Runs daily at 1 AM UTC

jobs:
  update-package: # Changed job name to be more specific
    runs-on: windows-latest

    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check PowerShell version
        run: |
          $PSVersionTable.PSVersion
          if ($PSVersionTable.PSVersion.Major -lt 7) {
            Write-Error "PowerShell 7 or higher is required"
            exit 1
          }

      - name: Install prerequisites
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          Install-PackageProvider -Name NuGet -Force # Ensuring NuGet is there
          Install-Module AU -Force
          choco install checksum -y --force --no-progress # Added --force and --no-progress for CI
          # Ensure Chocolatey itself is up to date if needed, though usually not required for package updates
          # choco upgrade chocolatey -y --no-progress

      - name: Set up Chocolatey environment
        run: |
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
          refreshenv
          # Ensure checksum tools are in PATH
          $env:Path += ";C:\ProgramData\chocolatey\lib\checksum\tools"
          Write-Host "PATH: $env:Path"

      - name: Run Jan update script
        run: |
          Unblock-File -Path ./Jan/updateNew.ps1
          Unblock-File -Path ./UpdateAll.ps1 # This might not be strictly necessary if not directly used by Jan's script but good for consistency
          ./Jan/updateNew.ps1 -debug # Added -debug for more verbose output if issues arise

      - name: Test Jan package
        run: |
          $packageDir = "Jan"
          $nuspecFile = Get-ChildItem -Path "$packageDir/*.nuspec" | Select-Object -First 1

          if (-not $nuspecFile) {
            Write-Host "No nuspec file found in Jan directory. Skipping test."
            exit 0 # Exit gracefully if no nuspec, implies no update or issue with script
          }

          [xml]$nuspecContent = Get-Content -Path $nuspecFile.FullName
          $packageId = $nuspecContent.package.metadata.id
          $packageVersion = $nuspecContent.package.metadata.version # Get version for nupkg name

          # Try to find the nupkg file using the version
          $nupkgFilePattern = "$packageDir/*.$packageVersion.nupkg" # More specific pattern
          $nupkgFile = Get-ChildItem -Path $nupkgFilePattern | Sort-Object LastWriteTime -Descending | Select-Object -First 1

          if (-not $nupkgFile) {
            # Fallback to any nupkg if version specific not found (e.g. if version wasn't updated in nuspec correctly)
            Write-Warning "Version specific .nupkg not found ($nupkgFilePattern). Looking for any .nupkg."
            $nupkgFile = Get-ChildItem -Path (Join-Path $packageDir "*.nupkg") | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          }

          if ($nupkgFile) {
            Write-Host "Found .nupkg in Jan directory: $($nupkgFile.FullName)"
            Write-Host "Package ID: $packageId"
            Write-Host "Package Version: $packageVersion"
            
            Write-Host "Installing package: $packageId"
            choco install $packageId -y --debug --verbose --source . --pre # Added --pre in case of pre-releases
            
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Package installation failed: $packageId"
              exit 1
            }
            
            Write-Host "Uninstalling package: $packageId"
            choco uninstall $packageId -y --debug --verbose
            
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Package uninstallation failed: $packageId"
              exit 1
            }
            echo "PACKAGE_ID=$packageId" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            echo "PACKAGE_VERSION=$packageVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          } else {
            Write-Host "No .nupkg found in Jan directory that was recently modified or matches version $packageVersion - assuming no update was made or script failed before packaging."
            # Output empty strings or a specific value to indicate no package found for later steps
            echo "PACKAGE_ID=" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            echo "PACKAGE_VERSION=" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }

      - name: Define Package Info for Push
        id: package_info
        shell: pwsh
        env:
          PACKAGE_ID: ${{ env.PACKAGE_ID }}
          PACKAGE_VERSION: ${{ env.PACKAGE_VERSION }}
        run: |
          $packageId = "$env:PACKAGE_ID"
          $localPackageVersion = "$env:PACKAGE_VERSION"

          if (-not $packageId -or -not $localPackageVersion) {
            Write-Warning "Package ID or Version not set. Skipping push steps."
            echo "NUPKG_FOUND=false" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            exit 0
          }

          Write-Host "Preparing to check/push $packageId version $localPackageVersion"
          $packageDir = "Jan" # This should be dynamic if applied to other workflows

          $nupkgFileToPush = Get-ChildItem -Path (Join-Path $packageDir "$packageId.$localPackageVersion.nupkg") | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if ($nupkgFileToPush) {
            Write-Host "Nupkg to push: $($nupkgFileToPush.FullName)"
            echo "NUPKG_FILE_PATH=$($nupkgFileToPush.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            echo "NUPKG_FOUND=true" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          } else {
            Write-Warning "No .nupkg found for $packageId version $localPackageVersion in $packageDir"
            echo "NUPKG_FOUND=false" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }

      - name: Check Chocolatey Status
        if: env.NUPKG_FOUND == 'true'
        id: check_choco_status
        shell: pwsh
        env:
          PACKAGE_ID: ${{ env.PACKAGE_ID }}
          PACKAGE_VERSION: ${{ env.PACKAGE_VERSION }}
        run: |
          $status = ./scripts/Check-ChocolateyStatus.ps1 -PackageId "$env:PACKAGE_ID" -PackageVersion "$env:PACKAGE_VERSION"
          Write-Host "Check status for $env:PACKAGE_ID/$env:PACKAGE_VERSION is: $status"
          echo "CHOCO_PUSH_STATUS=$status" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Push to Chocolatey
        if: env.NUPKG_FOUND == 'true' && env.CHOCO_PUSH_STATUS == 'PROCEED_WITH_PUSH'
        id: do_choco_push
        shell: pwsh
        env:
          CHOCO_API_KEY: ${{ secrets.CHOCO_API_KEY }}
          NUPKG_FILE_PATH: ${{ env.NUPKG_FILE_PATH }}
        run: |
          Write-Host "Attempting to push $env:NUPKG_FILE_PATH"
          choco push "$env:NUPKG_FILE_PATH" --source=https://push.chocolatey.org/ --api-key=$env:CHOCO_API_KEY
          if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to push package: $env:NUPKG_FILE_PATH"
              exit 1
          }

      - name: Log Successful Push
        if: steps.do_choco_push.outcome == 'success' && env.NUPKG_FOUND == 'true' && env.CHOCO_PUSH_STATUS == 'PROCEED_WITH_PUSH'
        shell: pwsh
        env:
          PACKAGE_ID: ${{ env.PACKAGE_ID }}
          PACKAGE_VERSION: ${{ env.PACKAGE_VERSION }}
        run: |
          $logDir = "./logs"
          $logFile = Join-Path $logDir "pushed-versions.log"
          # Ensure logs directory exists (though Check-ChocolateyStatus.ps1 might have created it)
          if (-not (Test-Path $logDir)) {
            New-Item -ItemType Directory -Path $logDir | Out-Null
          }
          $pushedEntry = "$env:PACKAGE_ID/$env:PACKAGE_VERSION"
          Add-Content -Path $logFile -Value $pushedEntry
          Write-Host "Logged successful push of $pushedEntry to $logFile"

      - name: Notify Skipped Push
        if: env.NUPKG_FOUND == 'true' && env.CHOCO_PUSH_STATUS == 'SKIP_PUSH'
        shell: pwsh
        env:
          PACKAGE_ID: ${{ env.PACKAGE_ID }}
          PACKAGE_VERSION: ${{ env.PACKAGE_VERSION }}
        run: |
          Write-Host "Push for $env:PACKAGE_ID version $env:PACKAGE_VERSION was skipped because it's already on Chocolatey.org or in the local push log."

      - name: Notify No Nupkg Found
        if: env.NUPKG_FOUND == 'false'
        shell: pwsh
        env:
          PACKAGE_ID: ${{ env.PACKAGE_ID }} # May be empty if not found in test step
          PACKAGE_VERSION: ${{ env.PACKAGE_VERSION }} # May be empty
        run: |
          if ($env:PACKAGE_ID) {
            Write-Host "Push for $env:PACKAGE_ID version $env:PACKAGE_VERSION was skipped because no matching .nupkg file was found."
          } else {
            Write-Host "Push was skipped because no package ID/version was determined (likely no nuspec found)."
          }

      - name: Commit changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git pull # Ensure local repo is up-to-date before attempting to commit/push
          git add ./Jan/* # Add all changes in the Jan directory
          # Check for staged changes before committing
          $changes = git diff --staged --name-only
          if ($changes) {
            git commit -m "Auto-update Jan package [skip ci]"
            git push
          } else {
            echo "No changes to commit for Jan package."
          }
