name: Chocolatey Package Update

on:
  # Run on manual trigger
  workflow_dispatch:

  # Run daily at midnight UTC
  schedule:
    - cron: "0 0 * * *"

jobs:
  update-packages:
    runs-on: windows-latest

    defaults:
      run:
        shell: pwsh

    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full git history for potential version tagging

      # Check PowerShell version to confirm we're using PowerShell Core (7+)
      - name: Check PowerShell version
        run: |
          $PSVersionTable.PSVersion
          if ($PSVersionTable.PSVersion.Major -lt 7) {
            Write-Error "PowerShell 7 or higher is required"
            exit 1
          }

      # Install Chocolatey AU (Automatic Updater) module
      - name: Install prerequisites
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          powershell.exe Install-PackageProvider -Name NuGet -Force
          Install-Module AU -Force
          choco install checksum -y

      # Run the update script
      - name: Run package update script
        run: |
          Unblock-File -Path .\UpdateAll.ps1
          .\UpdateAll.ps1

      # Test the packages
      - name: Test updated packages
        run: |
          # Extract package directories from UpdateAll.ps1
          $updateAllContent = Get-Content -Path .\UpdateAll.ps1 -Raw
          $packageDirs = $updateAllContent -split "`n" | 
                        Where-Object { $_ -match '\\([^\\]+)\\updateNew\.ps1' } | 
                        ForEach-Object { $matches[1] }

          Write-Host "Packages to check based on UpdateAll.ps1: $($packageDirs -join ', ')"

          # Find updated packages (those with new .nupkg files) from our target list
          $updatedPackages = @()

          foreach ($dir in $packageDirs) {
            if (Test-Path (Join-Path $dir "*.nupkg")) {
              Write-Host "Found .nupkg in directory: $dir"
              
              # Extract packageId from nuspec file
              $nuspecFile = Get-ChildItem -Path "$dir/*.nuspec" | Select-Object -First 1
              
              if ($nuspecFile) {
                [xml]$nuspecContent = Get-Content -Path $nuspecFile.FullName
                $packageId = $nuspecContent.package.metadata.id
                
                if ($packageId) {
                  $updatedPackages += [PSCustomObject]@{
                    Directory = $dir
                    PackageId = $packageId
                    NupkgFile = (Get-ChildItem -Path "$dir/*.nupkg" | Select-Object -First 1).FullName
                  }
                } else {
                  Write-Warning "Could not extract package ID from nuspec file in $dir"
                }
              } else {
                Write-Warning "No nuspec file found in $dir"
              }
            }
          }

          Write-Host "Updated packages found: $($updatedPackages.Count)"

          # Test each updated package
          foreach ($package in $updatedPackages) {
            Write-Host "Testing package: $($package.PackageId) from directory $($package.Directory)"
            
            # Install package by ID, not directory name
            Write-Host "Installing package: $($package.PackageId)"
            choco install $($package.PackageId) -y -s .
            
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Package installation failed: $($package.PackageId)"
              exit 1
            }
            
            # Uninstall the package 
            Write-Host "Uninstalling package: $($package.PackageId)"
            choco uninstall $($package.PackageId) -y
            
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Package uninstallation failed: $($package.PackageId)"
              exit 1
            }
          }

      # Push to Chocolatey if updates were found
      - name: Push to Chocolatey (Test Mode)
        env:
          CHOCO_API_KEY: ${{ secrets.CHOCO_API_KEY }}
          DRY_RUN: true # Set to false when ready for production
        run: |
          # Extract package directories from UpdateAll.ps1
          $updateAllContent = Get-Content -Path .\UpdateAll.ps1 -Raw
          $packageDirs = $updateAllContent -split "`n" | 
                        Where-Object { $_ -match '\\([^\\]+)\\updateNew\.ps1' } | 
                        ForEach-Object { $matches[1] }

          # Find updated packages
          $updatedPackages = @()

          foreach ($dir in $packageDirs) {
            $nupkgFiles = Get-ChildItem -Path "$dir/*.nupkg" -ErrorAction SilentlyContinue | 
                          Where-Object { $_.LastWriteTime -gt (Get-Date).AddHours(-1) }
            
            foreach ($nupkg in $nupkgFiles) {
              $updatedPackages += $nupkg.FullName
            }
          }

          if ($updatedPackages.Count -gt 0) {
            Write-Host "Found $($updatedPackages.Count) updated packages to push"
            
            foreach ($packagePath in $updatedPackages) {
              Write-Host "Pushing package: $packagePath"
              
              if ($env:DRY_RUN -ne "true") {
                choco push $packagePath --source=https://push.chocolatey.org/ --api-key=$env:CHOCO_API_KEY
              } else {
                Write-Host "DRY RUN: Would have pushed $packagePath to Chocolatey"
              }
            }
          } else {
            Write-Host "No updated packages found to push"
          }

      # Commit changes back to the repository
      - name: Commit changes
        if: success()
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git commit -m "Auto-update packages [skip ci]" -a || echo "No changes to commit"
          git push
